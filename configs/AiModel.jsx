const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate React App Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   "},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"projectTitle\": \"Dashboard App\",\n  \"explanation\": \"This React project creates a simple dashboard application with several key components: a Header for navigation, a Sidebar for accessing different sections, a Dashboard view displaying statistics and recent activity, and a Settings panel for user preferences. Tailwind CSS is used for styling to create a modern and responsive user interface. Lucide React icons are used for visual elements. Date-fns is used for date formatting.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport Header from './components/Header';\\nimport Sidebar from './components/Sidebar';\\nimport Dashboard from './components/Dashboard';\\nimport Settings from './components/Settings';\\nimport { useState } from 'react';\\nimport { format } from 'date-fns';\\n\\nfunction App() {\\n  const [activePage, setActivePage] = useState('dashboard');\\n\\n  const handleNavigation = (page) => {\\n    setActivePage(page);\\n  };\\n  const now = new Date();\\n  const formattedDate = format(now, 'MMMM dd, yyyy');\\n\\n  return (\\n    <div className=\\\"flex h-screen bg-gray-100\\\">\\n      <Sidebar onNavigate={handleNavigation} />\\n      <div className=\\\"flex-1 flex flex-col overflow-hidden\\\">\\n        <Header formattedDate={formattedDate} />\\n        <main className=\\\"flex-1 overflow-x-hidden overflow-y-auto bg-gray-100\\\">\\n          <div className=\\\"container mx-auto px-6 py-8\\\">\\n            {activePage === 'dashboard' && <Dashboard />}\\n            {activePage === 'settings' && <Settings />}\\n          </div>\\n        </main>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/Header.js\": {\n      \"code\": \"import React from 'react';\\nimport { Search, Menu, User } from 'lucide-react';\\n\\nfunction Header({formattedDate}) {\\n  return (\\n    <header className=\\\"bg-white shadow\\\">\\n      <div className=\\\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\\\">\\n        <div className=\\\"flex items-center justify-between\\\">\\n          <div className=\\\"flex items-center\\\">\\n            <button className=\\\"lg:hidden mr-3\\\">\\n              <Menu className=\\\"h-6 w-6 text-gray-500\\\" />\\n            </button>\\n            <h2 className=\\\"font-semibold text-xl text-gray-800\\\">Dashboard</h2>\\n          </div>\\n          <div className=\\\"flex items-center\\\">\\n            <div className=\\\"mr-4\\\">\\n              <Search className=\\\"h-5 w-5 text-gray-500\\\" />\\n            </div>\\n            <div className=\\\"text-sm text-gray-500 mr-4\\\">{formattedDate}</div>\\n            <button className=\\\"rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\\\">\\n              <User className=\\\"h-8 w-8 text-gray-500\\\" />\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </header>\\n  );\\n}\\n\\nexport default Header;\"\n    },\n    \"/components/Sidebar.js\": {\n      \"code\": \"import React from 'react';\\nimport { Home, Settings, Clock } from 'lucide-react';\\n\\nfunction Sidebar({ onNavigate }) {\\n  return (\\n    <div className=\\\"bg-gray-800 text-white w-64 flex-shrink-0\\\">\\n      <div className=\\\"h-16 flex items-center justify-center\\\">\\n        <span className=\\\"text-lg font-semibold\\\">My Dashboard 📊</span>\\n      </div>\\n      <div className=\\\"py-4\\\">\\n        <ul>\\n          <li className=\\\"px-6 py-2 hover:bg-gray-700 cursor-pointer flex items-center\\\">\\n            <Home className=\\\"mr-2\\\" />\\n            <button onClick={() => onNavigate('dashboard')}>Dashboard</button>\\n          </li>\\n          <li className=\\\"px-6 py-2 hover:bg-gray-700 cursor-pointer flex items-center\\\">\\n            <Settings className=\\\"mr-2\\\" />\\n            <button onClick={() => onNavigate('settings')}>Settings</button>\\n          </li>\\n          <li className=\\\"px-6 py-2 hover:bg-gray-700 cursor-pointer flex items-center\\\">\\n            <Clock className=\\\"mr-2\\\" />\\n            <button >Activity</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Sidebar;\"\n    },\n    \"/components/Dashboard.js\": {\n      \"code\": \"import React from 'react';\\nimport { Users, Heart, Shield } from 'lucide-react';\\nimport { format, subDays } from 'date-fns';\\nimport { Line } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\\n\\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\\n\\nfunction Dashboard() {\\n  const today = new Date();\\n  const labels = Array.from({ length: 7 }, (_, i) => format(subDays(today, 6 - i), 'MMM dd'));\\n\\n  const data = {\\n    labels: labels,\\n    datasets: [\\n      {\\n        label: 'Users',\\n        data: [65, 59, 80, 81, 56, 55, 40],\\n        fill: true,\\n        backgroundColor: 'rgba(75,192,192,0.2)',\\n        borderColor: 'rgba(75,192,192,1)',\\n        tension: 0.4,\\n      },\\n    ],\\n  };\\n\\n  const options = {\\n    responsive: true,\\n    plugins: {\\n      legend: {\\n        display: false,\\n      },\\n      title: {\\n        display: false,\\n        text: 'User Activity',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div>\\n      <h1 className=\\\"text-2xl font-semibold mb-4\\\">Dashboard Overview 🚀</h1>\\n      <div className=\\\"grid grid-cols-1 md:grid-cols-3 gap-4\\\">\\n        <div className=\\\"bg-white shadow rounded-md p-4 flex items-center\\\">\\n          <Users className=\\\"h-6 w-6 text-blue-500 mr-2\\\" />\\n          <div>\\n            <p className=\\\"text-gray-500\\\">Total Users</p>\\n            <p className=\\\"text-2xl font-semibold\\\">3,678</p>\\n          </div>\\n        </div>\\n        <div className=\\\"bg-white shadow rounded-md p-4 flex items-center\\\">\\n          <Heart className=\\\"h-6 w-6 text-red-500 mr-2\\\" />\\n          <div>\\n            <p className=\\\"text-gray-500\\\">Likes</p>\\n            <p className=\\\"text-2xl font-semibold\\\">1,254</p>\\n          </div>\\n        </div>\\n        <div className=\\\"bg-white shadow rounded-md p-4 flex items-center\\\">\\n          <Shield className=\\\"h-6 w-6 text-green-500 mr-2\\\" />\\n          <div>\\n            <p className=\\\"text-gray-500\\\">Security</p>\\n            <p className=\\\"text-2xl font-semibold\\\">Secure</p>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div className=\\\"mt-8\\\">\\n        <h2 className=\\\"text-xl font-semibold mb-4\\\">Recent Activity 📈</h2>\\n        <div className=\\\"bg-white shadow rounded-md p-4\\\">\\n          <Line data={data} options={options} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Dashboard;\"\n    },\n    \"/components/Settings.js\": {\n      \"code\": \"import React from 'react';\\nimport { useState } from 'react';\\nimport { Settings, Upload, Download, Trash, Edit } from 'lucide-react';\\n\\nfunction Settings() {\\n  const [profilePicture, setProfilePicture] = useState('https://archive.org/download/placeholder-image/placeholder-image.jpg');\\n\\n  const handlePictureChange = (event) => {\\n    const file = event.target.files[0];\\n    if (file) {\\n      const reader = new FileReader();\\n      reader.onloadend = () => {\\n        setProfilePicture(reader.result);\\n      };\\n      reader.readAsDataURL(file);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      <h1 className=\\\"text-2xl font-semibold mb-4\\\">Settings ⚙️</h1>\\n\\n      <div className=\\\"bg-white shadow rounded-md p-6\\\">\\n        <h2 className=\\\"text-xl font-semibold mb-4\\\">Profile Settings</h2>\\n        <div className=\\\"flex items-center mb-4\\\">\\n          <img src={profilePicture} alt=\\\"Profile\\\" className=\\\"w-20 h-20 rounded-full mr-4\\\" />\\n          <div>\\n            <label htmlFor=\\\"profile-picture-upload\\\" className=\\\"cursor-pointer text-blue-500 hover:text-blue-700 flex items-center\\\">\\n              <Upload className=\\\"h-5 w-5 mr-1\\\" />\\n              Upload New Picture\\n            </label>\\n            <input\\n              type=\\\"file\\\"\\n              id=\\\"profile-picture-upload\\\"\\n              accept=\\\"image/*\\\"\\n              className=\\\"hidden\\\"\\n              onChange={handlePictureChange}\\n            />\\n            <button className=\\\"text-red-500 hover:text-red-700 ml-4 flex items-center\\\">\\n              <Trash className=\\\"h-5 w-5 mr-1\\\" />\\n              Remove\\n            </button>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"mb-4\\\">\\n          <label htmlFor=\\\"username\\\" className=\\\"block text-gray-700 text-sm font-bold mb-2\\\">Username</label>\\n          <input\\n            type=\\\"text\\\"\\n            id=\\\"username\\\"\\n            className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n            placeholder=\\\"Enter username\\\"\\n          />\\n        </div>\\n\\n        <div className=\\\"mb-4\\\">\\n          <label htmlFor=\\\"email\\\" className=\\\"block text-gray-700 text-sm font-bold mb-2\\\">Email</label>\\n          <input\\n            type=\\\"email\\\"\\n            id=\\\"email\\\"\\n            className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n            placeholder=\\\"Enter email\\\"\\n          />\\n        </div>\\n\\n        <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center\\\">\\n          <Edit className=\\\"h-5 w-5 mr-1\\\" />\\n          Update Profile\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Settings;\"\n    },\n    \"/index.js\": {\n      \"code\": \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\"\n    },\n    \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    },\n    \"/vite.config.js\": {\n      \"code\": \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n    },\n     \"/package.json\": {\n            \"code\": \"{\\n  \\\"name\\\": \\\"react-dashboard\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"date-fns\\\": \\\"^2.30.0\\\",\\n    \\\"lucide-react\\\": \\\"^0.309.0\\\",\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-chartjs-2\\\": \\\"^5.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"chart.js\\\": \\\"^4.4.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.43\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.17\\\",\\n    \\\"@vitejs/plugin-react-swc\\\": \\\"^3.5.0\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.16\\\",\\n    \\\"eslint\\\": \\\"^8.55.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.33.2\\\",\\n    \\\"eslint-plugin-react-hooks\\\": \\\"^4.6.0\\\",\\n    \\\"eslint-plugin-react-refresh\\\": \\\"^0.4.5\\\",\\n    \\\"postcss\\\": \\\"^8.4.32\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.0\\\",\\n    \\\"vite\\\": \\\"^5.0.8\\\"\\n  }\\n}\"\n        },\n        \"/postcss.config.js\": {\n          \"code\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\"\n        },\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/Header.js\",\n    \"/components/Sidebar.js\",\n    \"/components/Dashboard.js\",\n    \"/components/Settings.js\",\n    \"/index.js\",\n    \"/index.css\",\n    \"/vite.config.js\",\n     \"/package.json\",\n    \"/postcss.config.js\"\n  ]\n}\n```"},
      ],
    },
  ],
});
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
